---
apiVersion: v1
kind: "Template"
metadata:
  name: wordpress-ephemeral
  annotations:
    description: "An example WordPress application with a MySQL database."
    tags: "quickstart,php,mysql,instant-app,kermit"
    iconClass: icon-wordpress
labels:
  template: wordpress-ephemeral
objects:
# +++++++++++++++++++++++++++
# +++ LAYER 0 BASE IMAGES +++
# +++++++++++++++++++++++++++
#
# +++++++++++++++++++++++++++
# ++++++ LAYER 1 BUILDS +++++
# +++++++++++++++++++++++++++
- kind: "BuildConfig"
  apiVersion: v1
  metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
        annotations: 
          description: "Defines how to build the application"
  spec:
    triggers: 
      - 
        type: ImageChange
        imageChange: {}
      - 
        type: ConfigChange
      - 
        type: GitHub
        github: 
          secret: "${WEBHOOK_SECRET}"
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: "${SOURCE_REPOSITORY_CONTEXT}"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: php:latest
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
# +++++++++++++++++++++++++++
# ++++++ LAYER 2 IMAGES +++++
# +++++++++++++++++++++++++++
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      description: "Resulting Docker Image after the buit of my application frontend."
  spec:
    tags:
      -
        tag: latest  
# +++++++++++++++++++++++++++
# +++ LAYER 3 DEPLOYMENTS +++
# +++++++++++++++++++++++++++
# ///////////////////////////
# /// FRONTEND DEPLOYMENT ///
# ///////////////////////////	    
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME} 
    annotations: 
      description: "Defines how to deploy the application server"
  spec:
    strategy: 
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
    triggers:
    - 
      type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    - 
      type: ConfigChange
    replicas: 1
    test: false
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    template:
      metadata:
        name: ${APPLICATION_NAME}
        labels: 
          deploymentConfig: ${APPLICATION_NAME}  
      spec:
        containers:
          - 
            name: ${APPLICATION_NAME}
            image: ${APPLICATION_NAME}:latest
            ports:
              - 
                name: "http"
                containerPort: 8080
                protocol: TCP
            env:
              -
                name: MYSQL_USER
                value: ${MYSQL_USER}
              -
                name: MYSQL_PASSWORD
                value: ${MYSQL_PASSWORD}
              -
                name: MYSQL_DATABASE
                value: ${MYSQL_DATABASE}
              -
                name: MYSQL_SERVICE
                value: ${APPLICATION_NAME}-db-svc
            resources: {}
            terminationMessagePath: /dev/termination-log
            imagePullPolicy: Always
            securityContext:
              capabilities: {}
              privileged: false
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
# ----------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------
# //////////////////////////
# /// BACKEND DEPLOYMENT ///
# //////////////////////////
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-db
    labels:
      app: ${APPLICATION_NAME}  
    annotations: 
      description: "Defines how to deploy the application database"
  spec:
    strategy: 
      type: Recreate
      recreateParams:
        timeoutSeconds: 600
    triggers:
      -
        type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${APPLICATION_NAME}-db
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: mysql:latest
      -
        type: ConfigChange
    replicas: 1
    test: false
    selector:
      deploymentConfig: ${APPLICATION_NAME}-db
    template:
      metadata:
        name: ${APPLICATION_NAME}-db
        labels: 
          deploymentConfig: ${APPLICATION_NAME}-db  
      spec:
        containers:
          - 
            name: "${APPLICATION_NAME}-db"
            image: "${APPLICATION_NAME}-db"
            ports:
              -
                name: "db"
                containerPort: 3306
                protocol: TCP
            env: 
              -
                name: MYSQL_USER
                value: ${MYSQL_USER}
              -
                name: MYSQL_PASSWORD
                value: ${MYSQL_PASSWORD}
              -
                name: MYSQL_DATABASE
                value: ${MYSQL_DATABASE}
              -
                name: MYSQL_SERVICE
                value: ${APPLICATION_NAME}-db-svc
            resources:
              limits:
                memory: 512Mi
            livenessProbe:
              tcpSocket:
                port: 3306
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              exec:
                "command": [ "/bin/sh", "-i", "-c", "MYSQL_PWD='${MYSQL_PASSWORD}' mysql -h 127.0.0.1 -u ${MYSQL_USER} -D ${MYSQL_DATABASE} -e 'SELECT 1'" ]      
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "/dev/termination-log"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: false
        restartPolicy: "Always"
        terminationGracePeriodSeconds: 30
        dnsPolicy: "ClusterFirst"
# +++++++++++++++++++++++++++++++++
# ++++++ LAYER 4 ABSTRACTIONS +++++
# +++++++++++++++++++++++++++++++++
# ////////////////////////
# /// FRONTEND SERVICE ///
# ////////////////////////		
- apiVersion: v1
  kind: Service
  metadata:
    name: "${APPLICATION_NAME}-svc"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      description: "Exposes and load balances the application frontend pods."
  spec:
    ports:
      -
        name: "http"
        protocol: TCP
        port: 8080
        targetPort: 8080
    selector:
      deploymentConfig: ${APPLICATION_NAME}
# ----------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------
# ///////////////////////
# /// BACKEND SERVICE ///
# ///////////////////////
- apiVersion: v1
  kind: Service
  metadata:
    name: "${APPLICATION_NAME}-db-svc"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      description: "Exposes and load balances the application database pods."
  spec:
    ports:
      -
        name: "db"
        protocol: TCP
        port: 3306
        targetPort: 3306
    selector:
      deploymentConfig: ${APPLICATION_NAME}-db
# ----------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------
# ////////////////////////
# /// FRONTEND ROUTE /////
# ////////////////////////
- apiVersion: v1
  kind: Route
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      network: ${PUBLIC_NETWORK}
    annotations:
      description: "The route exposes the frontend service at a hostname."
  spec:
    host: "${APPLICATION_HOSTNAME}"
    to:
      kind: Service
      name: ${APPLICATION_NAME}-svc
    port:
      targetPort: 8080
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Allow
# ----------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------
# ////////////////////
# /// PARAMETERS /////
# ////////////////////
parameters: 
  - name: "APPLICATION_NAME"
    displayName: "Application name"
    description: "The name assigned to all of the objects defined in this template."
    required: true
    value: "wordpress"
  - name: "APPLICATION_HOSTNAME"
    displayName: "Application hostname"
    description: "The hostname for exposing your application on the Internal Network (*.kermit.itn.intraorange) or on the Internet (*.kmt.orange.com)."
  - name: "PUBLIC_NETWORK"
    displayName: "Application exposed on Internet Flag"
    description: "If your application will be exposed on the Internet (HOSTNAME = *.kmt.orange.com) you need to setup this flag with the value: public"
  - name: SOURCE_REPOSITORY_URL
    description: The URL of the repository with your application source code
    required: true
    value: https://github.com/wordpress/wordpress.git
  - name: "SOURCE_REPOSITORY_REF"
    displayName: "Git Repository Reference"
    description: "The branch/tag/ref inside the repository where your application source code resides."
    value: "master"
  - name: "SOURCE_REPOSITORY_CONTEXT"
    displayName: "Git Repository Context Directory"
    description: "The location inside the repository where your application source code resides."
  - name: "WEBHOOK_SECRET"
    displayName: "Git Webhook Secret"
    description: "A secret string used to configure the Git webhook."
    generate: "expression"
    from: "[a-zA-Z0-9]{40}"
  - name: "MYSQL_DATABASE"
    displayName: "Database Name"
    value: "wordpressdb"
  - name: "MYSQL_USER"
    displayName: "Database User"
    value: "wordpress"
  - name: "MYSQL_PASSWORD"
    displayName: "Database Password"
    value: "wordpress"
